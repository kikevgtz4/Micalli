services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    environment:
      # Client-side (browser)
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NEXT_PUBLIC_BASE_URL=http://localhost:3000
      - NEXT_PUBLIC_MEDIA_URL=http://localhost:8000/media
      - NEXT_PUBLIC_MAPBOX_ACCESS_TOKEN=${MAPBOX_TOKEN}
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
      
      # Server-side (Docker internal)
      - INTERNAL_API_URL=http://backend:8000/api
      - INTERNAL_MEDIA_URL=http://backend:8000/media
      - INTERNAL_WS_URL=ws://backend:8000

      # Hot reload configuration - ADD THESE
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    stdin_open: true  # ADD THIS
    tty: true         # ADD THIS

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/micalli
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - IN_DOCKER=true
      - POSTGRES_HOST=db
      - POSTGRES_DB=micalli
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PYTHONUNBUFFERED=1
    # Fixed Daphne command - note the proper argument order
    command: >
      sh -c "
      python manage.py migrate &&
      daphne 
      -b 0.0.0.0 
      -p 8000 
      --ping-interval 25
      --ping-timeout 60
      --websocket_timeout 86400
      --application-close-timeout 60
      --proxy-headers
      -v 2
      micalli_backend.asgi:application
      "
      
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: celery -A micalli_backend worker -l info
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/micalli
      - DEBUG=True
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0
      - SECRET_KEY=django-insecure-dev-key-change-in-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - IN_DOCKER=true
      - POSTGRES_HOST=db
      - POSTGRES_DB=micalli
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - PYTHONUNBUFFERED=1

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: celery -A micalli_backend beat -l info
    volumes:
      - ./backend:/app
    depends_on:
      - db
      - redis
    environment:
      # Same as celery worker
      - DATABASE_URL=postgres://postgres:postgres@db:5432/micalli
      - DEBUG=True
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - IN_DOCKER=true
      - PYTHONUNBUFFERED=1

  flower:  # Optional: Celery monitoring dashboard
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    command: celery -A micalli_backend flower --port=5555
    ports:
      - "5555:5555"
    depends_on:
      - celery
      - redis
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/micalli
      - REDIS_HOST=redis
      - REDIS_PORT=6379

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=micalli
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    # Enhanced Redis configuration
    command: >
      redis-server 
      --appendonly yes 
      --tcp-keepalive 60
      --timeout 0
      --tcp-backlog 511
      --maxclients 10000

volumes:
  postgres_data:
  redis_data:
