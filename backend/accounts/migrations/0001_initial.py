# Generated by Django 5.1.4 on 2025-08-11 01:15

import django.utils.timezone
import imagekit.models.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='PropertyOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(blank=True, max_length=100)),
                ('business_registration', models.CharField(blank=True, max_length=100)),
                ('verification_status', models.BooleanField(default=False)),
                ('tax_id', models.CharField(blank=True, help_text='RFC or tax identification', max_length=50)),
                ('business_phone', models.CharField(blank=True, max_length=20)),
                ('business_address', models.TextField(blank=True)),
                ('established_year', models.IntegerField(blank=True, null=True)),
                ('property_count', models.IntegerField(default=0)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Property Owner Profile',
                'verbose_name_plural': 'Property Owner Profiles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),
                ('username', models.CharField(help_text='Auto-generated from email', max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=150)),
                ('user_type', models.CharField(choices=[('student', 'Student'), ('property_owner', 'Property Owner'), ('admin', 'Admin')], default='student', max_length=20)),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('profile_picture', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('student_id_verified', models.BooleanField(default=False)),
                ('graduation_year', models.IntegerField(blank=True, null=True)),
                ('program', models.CharField(blank=True, max_length=100, null=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('email_verification_token', models.CharField(blank=True, max_length=255, null=True)),
                ('email_verification_sent_at', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
